<?xml version="1.0" encoding="UTF-8"?>

<SHADER name="texDiffFog">
	<VERTEX>
	// vertex shader
	// ------------------------------------------------------
	// texture diffuse shader per fragment
	// ------------------------------------------------------
	// lights nb: 1
	// textures nb: 1
	// ------------------------------------------------------

	// attributes inputs  (vertex arrays)
		attribute vec3 aVertexPosition;
		attribute vec2 aVertexTexCoord;
		attribute vec3 aVertexNormal;

	// uniform matrices
		uniform mat4 uMVMatrix;
		uniform mat4 uPMatrix;
		uniform mat3 uNMatrix;

	// output
    	varying vec2 vTextureCoord;
		varying vec4 vPosition;
		varying vec3 vNormal;
        varying float vDist;

    void main(void) {
		// vPosition
		vPosition =  uMVMatrix * vec4(aVertexPosition, 1.0);

    	// vNormal
		vNormal = uNMatrix * aVertexNormal;

        gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);
        // z value of vertices
        vDist = gl_Position.w;
		// vTextureCoord
        vTextureCoord = aVertexTexCoord;
    }
	</VERTEX>
	<FRAGMENT>
	#ifdef GL_ES
	precision highp float;
	#endif
	// fragment shader
	// ------------------------------------------------------
	// texture diffuse shader per fragment
	// ------------------------------------------------------
	// lights nb: 1
	// textures nb: 1
	// ------------------------------------------------------

	// local constant
		// Kd: diffuse coeff
		float Kd = 1.0 ;
		vec3 FogColor = vec3(0.5, 0.5, 0.5);
		vec3 rimColor = vec3(0.2, 0.2, 0.2);

	// inputs
    	varying vec2 vTextureCoord;
		varying vec4 vPosition;
		varying vec3 vNormal;
        varying float vDist;

    // Uniform
    	uniform sampler2D uSampler0;

		// lights
		// ambient
		uniform vec3 uAmbientColor;

		//point light ie omni dir:  location, color
		uniform vec3 uPointLightPosition0;
		uniform vec3 uPointLightColor0;


    void main(void) {
    	// light direction
		vec3 lightDirection = normalize(uPointLightPosition0 - vPosition.xyz);
		// eye direction
		vec3 eyeDirection = normalize(-vPosition.xyz);
		// normalize normal
		vec3 normal = normalize(vNormal);
		// rim
		float rim = 1.0 - max(dot(eyeDirection, normal), 0.0);
		rim = smoothstep(0.6, 1.0, rim);
		vec3 finalRim = rimColor * vec3(rim, rim, rim);
		//  diffuse term
		float diffuse = max(dot(normal, lightDirection), 0.0);
		// texture color
		vec4 texColor  = texture2D(uSampler0, vec2(vTextureCoord.s, vTextureCoord.t));
		// light color
		vec3 lightColor =
			Kd*uAmbientColor*texColor.rgb +
			Kd*diffuse*uPointLightColor0 *texColor.rgb +
			finalRim;

		// Exponential Fog
		float rangeDist = length(vPosition);
		float fogValue = 1.0 / exp( (rangeDist * 0.05) * (rangeDist * 0.05) );
		fogValue = clamp(fogValue, 0.0, 1.0);
        // lerp : https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/mix.xhtml
        vec3 color = mix(FogColor, lightColor, fogValue);
        gl_FragColor = vec4(color, texColor.a); // texColor.a or 1.0
    }
	</FRAGMENT>
</SHADER>
