<?xml version="1.0" encoding="UTF-8"?>

<SHADER name="blackAndWhite">
	<VERTEX>
	// vertex shader
	// ------------------------------------------------------
	// texture diffuse shader per fragment
	// ------------------------------------------------------
	// lights nb: 1
	// textures nb: 1
	// ------------------------------------------------------

	// attributes inputs  (vertex arrays)
		attribute vec3 aVertexPosition;
		attribute vec2 aVertexTexCoord;
		attribute vec3 aVertexNormal;

	// uniform matrices
		uniform mat4 uMVMatrix;
		uniform mat4 uPMatrix;
		uniform mat3 uNMatrix;
		
	// time for noise animation
		uniform float uRandom;
		
	// output
    	varying vec2 vTextureCoord;
		varying vec4 vPosition;
		varying vec3 vNormal;
		varying float vRandom;
		
    void main(void) {
	
		// vPosition
		vPosition =  uMVMatrix * vec4(aVertexPosition, 1.0);

    	// vNormal
		vNormal = uNMatrix * aVertexNormal;

        gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);

		// vTextureCoord
        vTextureCoord = aVertexTexCoord;
		vRandom = uRandom;
    }
	</VERTEX>
	<FRAGMENT>
	#ifdef GL_ES
	precision highp float;
	#endif
	// fragment shader
	// ------------------------------------------------------
	// texture diffuse shader per fragment
	// ------------------------------------------------------
	// lights nb: 1
	// textures nb: 1
	// ------------------------------------------------------

	// local constant
		// Kd: diffuse coeff
		float Kd = 1.0 ;

	// inputs
    	varying vec2 vTextureCoord;
		varying vec4 vPosition;
		varying vec3 vNormal;
		varying float vRandom;
		
    // Uniform
    	uniform sampler2D uSampler0;

		
		// lights
		// ambient
		uniform vec3 uAmbientColor;
		
		//point light ie omni dir:  location, color
		uniform vec3 uPointLightPosition0;
		uniform vec3 uPointLightColor0;

		// rand function
		float rand(vec2 co){
			return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
		}

    void main(void) {
    	// light direction
		vec3 lightDirection = normalize(uPointLightPosition0 - vPosition.xyz);
		// eye direction
		vec3 eyeDirection = normalize(-vPosition.xyz);

		// normalize normal
		vec3 normal = normalize(vNormal);

		//  diffuse term
		float diffuse = max(dot(normal, lightDirection), 0.0);

		// texture color
		vec4 texColor  = texture2D(uSampler0, vec2(vTextureCoord.s, vTextureCoord.t));

		// light color
		vec3 lightColor =
			Kd*uAmbientColor*texColor.rgb +
			Kd*diffuse*uPointLightColor0 *texColor.rgb ;

		lightColor.r = lightColor.r * .21 + lightColor.g * .72 + lightColor.b * .07;
		lightColor.g = lightColor.r;
		lightColor.b = lightColor.r;
		
		
		float randfloat = rand(vec2(vRandom*lightColor.r, vRandom*vTextureCoord.s + vRandom*vTextureCoord.t));
		if( randfloat > 0.9) {
			lightColor = vec3(0.0,0.0,0.0);
		}
		
        gl_FragColor = vec4(lightColor,1.0);
    }
	</FRAGMENT>
</SHADER>
