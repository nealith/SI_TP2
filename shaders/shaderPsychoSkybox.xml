<?xml version="1.0" encoding="UTF-8"?>

<SHADER name="psychoSkybox">
	<VERTEX>
	// vertex shader
	// ------------------------------------------------------
	// texture diffuse shader per fragment
	// ------------------------------------------------------
	// lights nb: 1
	// textures nb: 1
	// ------------------------------------------------------

	// attributes inputs  (vertex arrays)
		attribute vec3 aVertexPosition;
		attribute vec2 aVertexTexCoord;
		attribute vec3 aVertexNormal;

	// uniform matrices
		uniform mat4 uMVMatrix;
		uniform mat4 uPMatrix;
		uniform mat3 uNMatrix;

		uniform float uTime;

	// output
    	varying vec2 vTextureCoord;
    
	void main(void) {
        gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);
		vTextureCoord = aVertexTexCoord;
    }
	</VERTEX>
	<FRAGMENT>
	#ifdef GL_ES
	precision highp float;
	#endif
	// fragment shader
	// ------------------------------------------------------
	// texture diffuse shader per fragment
	// ------------------------------------------------------
	// lights nb: 1
	// textures nb: 1
	// ------------------------------------------------------

	// inputs
    	varying vec2 vTextureCoord;
				
    // Uniform
    	uniform sampler2D uSampler0;
		uniform float uTime;

	float hue2rgb(float f1, float f2, float hue) {
		if (hue &lt; 0.0)
			hue += 1.0;
		else if (hue &gt; 1.0)
			hue -= 1.0;
		float res;
		if ((6.0 * hue) &lt; 1.0)
			res = f1 + (f2 - f1) * 6.0 * hue;
		else if ((2.0 * hue) &lt; 1.0)
			res = f2;
		else if ((3.0 * hue) &lt; 2.0)
			res = f1 + (f2 - f1) * ((2.0 / 3.0) - hue) * 6.0;
		else
			res = f1;
		return res;
	}

	vec3 hsl2rgb(vec3 hsl) {
		vec3 rgb;
		if (hsl.y == 0.0) {
			rgb = vec3(hsl.z); // Luminance
		} else {
			float f2;
			if (hsl.z &lt; 0.5)
				f2 = hsl.z * (1.0 + hsl.y);
			else
				f2 = hsl.z + hsl.y - hsl.y * hsl.z;
				
			float f1 = 2.0 * hsl.z - f2;
			rgb.r = hue2rgb(f1, f2, hsl.x + (1.0/3.0));
			rgb.g = hue2rgb(f1, f2, hsl.x);
			rgb.b = hue2rgb(f1, f2, hsl.x - (1.0/3.0));
		}   
		return rgb;
	}

    void main(void) {
		// texture color
		//vec4 texColor  = texture2D(uSampler0, vec2(vTextureCoord.s, vTextureCoord.t));
		float a = 0.5 * (uTime / 10000.0) * sin(2.0 * 3.14159265 * (uTime / 8000.0));
		float b = 0.5 * (uTime / 10000.0) * cos(2.0 * 3.14159265 * (uTime / 8000.0));
		float h = (vTextureCoord.s * a + vTextureCoord.t * b) * 0.5;
		clamp(h, 0.0, 1.0);
		vec3 hsl = vec3(h, 0.8, 0.5);
		vec3 rgb = hsl2rgb(hsl);
		gl_FragColor = vec4(rgb, 1.0);
	}
	</FRAGMENT>
</SHADER>
