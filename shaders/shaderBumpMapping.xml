<?xml version="1.0" encoding="UTF-8"?>

<SHADER name="shaderBase">
	<VERTEX>
    // vertex shader
    // ------------------------------------------------------
    // bump mapping per vertex
    // ------------------------------------------------------
    // lights nb: 1
    // textures nb: 3
    // ------------------------------------------------------
    // Insert vertex shader js code here

    // attributes inputs  (vertex arrays)
  		attribute vec3 aVertexPosition;
  		attribute vec2 aVertexTexCoord;
  		attribute vec3 aVertexNormal;

    // uniform matrices
  		uniform mat4 uMVMatrix;
  		uniform mat4 uPMatrix;
  		uniform mat3 uNMatrix;

    // output
      varying vec4 vPosition;
  		varying vec2 vTextureCoord;
  		varying vec3 vNormal;

    void main(void){
      // vPosition
      vPosition =  uMVMatrix * vec4(aVertexPosition, 1.0);

      // vNormal
		  vNormal = uNMatrix * aVertexNormal;

      gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);

      // vTextureCoord
	    vTextureCoord = aVertexTexCoord;

    }

	</VERTEX>
	<FRAGMENT>
    #ifdef GL_ES
		  precision highp float;
	  #endif


    // fragment shader
    // ------------------------------------------------------
    // bump mapping per fragment
    // ------------------------------------------------------
    // lights nb: 1
    // textures nb: 3
    // ------------------------------------------------------
    // Insert fragment shader js code here

    // local constant
  		// Kd: diffuse coeff
  		float Kd = 1.0 ;
      const float nbLayers = 256.0;

  	// inputs
  		varying vec4 vPosition;
      varying vec2 vTextureCoord;
  		varying vec3 vNormal;

    // Uniform
    	uniform sampler2D uSampler0; // Texture
    	uniform sampler2D uSampler1; // Normal Map
      uniform sampler2D uSampler2; // Depth Map

    // lights
		// ambient
		uniform vec3 uAmbientColor;

		//point light ie omni dir:  location, color
		uniform vec3 uPointLightPosition0;
		uniform vec3 uPointLightColor0;



    vec2 computeUV(vec2 uv, vec3 eyeDirection){

      // Steep parallax mapping

      vec2 deltaUV = eyeDirection.xy * 0.1 / (eyeDirection.z * nbLayers);

      float depth = texture2D(uSampler2,uv).r;

      float layerDepth = 1.0/nbLayers;
      float currentLayerDepth = 0.0;

      vec2 currentUV = uv;

      for (float i = 1.0; i != nbLayers;i++){
        currentLayerDepth += layerDepth;
        currentUV -= deltaUV;
				depth = texture2D(uSampler2,currentUV).r;
        if (currentLayerDepth >= depth){
          break;
        }
      }

      // Parallax occlusion mapping

      vec2 previousUV = currentUV + deltaUV;
      float next = depth - currentLayerDepth;
      float previous = texture2D(uSampler2,previousUV).r - currentLayerDepth + layerDepth;
      float weight = next / (next - previous);

      return mix(currentUV,previousUV,weight);
    }

    void main(void){

      // light direction
      vec3 lightDirection = normalize(uPointLightPosition0 - vPosition.xyz);
      // eye direction
      vec3 eyeDirection = normalize(-vPosition.xyz);

      vec2 newUV = computeUV(vTextureCoord,eyeDirection);
			//vec2 uv = vTextureCoord;

      /*vec4 texColor  = texture2D(uSampler0, uv);

      vec3 normal = normalize(texture2D(uSampler1,uv).rgb * 2.0 - 1.0);

      //  diffuse term
      float diffuse = max(dot(lightDirection,normal), 0.0);*/

      // normalize normal
      vec3 oldNormal = normalize(vNormal);
      // new normal in tangent space
      vec3 newNormalTS = normalize(2.0*texture2D(uSampler1, newUV).xyz -1.0) ;
      //newNormalTS.z = newNormalTS.z*1000.0;
      // newNormalTS = normalize(newNormalTS);
      // TS to View
      vec3 biTangent = cross(oldNormal,vec3(0.0,0.0,1.0));
      // test tangent
      if (dot(biTangent,biTangent) == 0.0){biTangent = cross(oldNormal,vec3(0.0,1.0,0.0));}
      vec3 tangent =  cross(biTangent,oldNormal);
      // no transpose
      vec3 u1 = tangent ;
      vec3 u2 = biTangent;
      vec3 u3 = oldNormal;
      // TS to view matrix
      mat3 TBN = mat3(u1,u2,u3);
      // transform normal
      vec3 normal = TBN*newNormalTS ;
      //  diffuse term
      float diffuseLightWeight = max(dot(lightDirection,normal), 0.0);

      // texture color
      vec4 texColor  = texture2D(uSampler0, newUV);


      // light color
      vec3 lightColor = Kd*uAmbientColor*texColor.rgb + Kd*diffuseLightWeight*uPointLightColor0 *texColor.rgb ;

      //gl_FragColor = vec4(texColor * diffuse * Kd);
			gl_FragColor = vec4(lightColor,1.0);
    }


	</FRAGMENT>
</SHADER>
