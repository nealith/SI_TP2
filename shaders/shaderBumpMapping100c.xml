<?xml version="1.0" encoding="UTF-8"?>

<SHADER name="shaderBase">
	<VERTEX>
    // vertex shader
    // ------------------------------------------------------
    // bump mapping per vertex
    // ------------------------------------------------------
    // lights nb: 1
    // textures nb: 3
    // ------------------------------------------------------
    // Insert vertex shader js code here

    // attributes inputs  (vertex arrays)
  		attribute vec3 aVertexPosition;
  		attribute vec2 aVertexTexCoord;
  		attribute vec3 aVertexNormal;

    // uniform matrices
  		uniform mat4 uMVMatrix;
  		uniform mat4 uPMatrix;
  		uniform mat3 uNMatrix;

    // output
      varying vec4 vPosition;
  		varying vec2 vTextureCoord;
  		varying vec3 vNormal;

    void main(void){
      // vPosition
      vPosition =  uMVMatrix * vec4(aVertexPosition, 1.0);

      // vNormal
		  vNormal = uNMatrix * aVertexNormal;

      gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);

      // vTextureCoord
	    vTextureCoord = aVertexTexCoord;

    }

	</VERTEX>
	<FRAGMENT>
    #ifdef GL_ES
		  precision highp float;
	  #endif


    // fragment shader
    // ------------------------------------------------------
    // bump mapping per fragment
    // ------------------------------------------------------
    // lights nb: 1
    // textures nb: 3
    // ------------------------------------------------------
    // Insert fragment shader js code here

    // local constant
  		// Kd: diffuse coeff
  		float Kd = 1.0 ;

			const float nbLayers = 32.0;

  	// inputs
  		varying vec4 vPosition;
      varying vec2 vTextureCoord;
  		varying vec3 vNormal;

    // Uniform
    	uniform sampler2D uSampler0; // Texture
    	uniform sampler2D uSampler1; // Normal Map
      uniform sampler2D uSampler2; // Depth Map
			uniform int uPointLightNumber;
			uniform float uPointLightPositions[300];
			uniform float uPointLightColors[300];

    // lights
		// ambient
		uniform vec3 uAmbientColor;

		//point light ie omni dir:  location, color
		uniform vec3 uPointLightPosition0;
		uniform vec3 uPointLightColor0;

		float pow2 (float x){
			return x*x;
		}

		float norm(vec3 v){
			return sqrt(pow2(v[0])+pow2(v[1])+pow2(v[2]));
		}

		mat3 transpose(mat3 inMatrix)
		{
		    vec3 i0 = inMatrix[0];
		    vec3 i1 = inMatrix[1];
		    vec3 i2 = inMatrix[2];

		    mat3 outMatrix = mat3(
		        vec3(i0.x, i1.x, i2.x),
		        vec3(i0.y, i1.y, i2.y),
		        vec3(i0.z, i1.z, i2.z)
		    );

		    return outMatrix;
		}

		vec3 computeEyeDirection(vec3 eyeDir){

			// Calcul des tangent et biTangent
			// normalize normal
			vec3 oldNormal = normalize(vNormal);

			// TS to View
			vec3 biTangent = cross(oldNormal,vec3(0.0,0.0,1.0));
			// test tangent
			if (dot(biTangent,biTangent) == 0.0){biTangent = cross(oldNormal,vec3(0.0,1.0,0.0));}
			vec3 tangent =  cross(biTangent,oldNormal);
			// no transpose
			vec3 u1 = tangent ;
			vec3 u2 = biTangent;
			vec3 u3 = oldNormal;
			// TS to view matrix
			mat3 TBN = mat3(u1,u2,u3);
			// transform normal

			return transpose(TBN)*-eyeDir;

			//vec3 v = transpose(TBN)*vCameraPosition;

			//return vec3(vTextureCoord,0.0)-v;

			/*

			// Rotation matrice calcul :
			// source : https://math.stackexchange.com/questions/180418/calculate-rotation-matrix-to-align-vector-a-to-vector-b-in-3d

			vec3 a = normalize(vNormal);
			vec3 b = vec3(0.0,0.0,1.0);

			vec3 v = cross(a,b);
			float s = sqrt(pow2(v[0])+pow2(v[1])+pow2(v[2])); // sin(teta)
			float c = dot(a,b); //cos(teta)

			mat3 vs = mat3(	vec3(0,v[2],-v[1]),
											vec3(-v[2],0,v[0]),
											vec3(v[1],-v[0],0)
			);

			mat3 I = mat3(	vec3(1,0,0),
											vec3(0,1,0),
											vec3(0,0,1)
			);

			mat3 R = I + vs + vs*vs*((1.0-c)/pow2(s));

			//------------------------------------

			return R*normalize(eyeDir);*/

		}

	  vec2 computeUV(vec2 uv, vec3 eyeDirection){

		 	if (normalize(vNormal) != normalize(eyeDirection)){

				eyeDirection = computeEyeDirection(eyeDirection);

				if ( 0.0 > eyeDirection.z ){
					// Steep parallax mapping
					float layerDepth = 1.0/nbLayers;
					float currentLayerDepth = 0.0;

					vec2 deltaUV = eyeDirection.xy*0.05 / (eyeDirection.z*nbLayers);

					vec2 currentUV = uv;

					float depth = texture2D(uSampler2,currentUV).r;

					for (float i = 1.0; i != nbLayers;i++){
						currentLayerDepth += layerDepth;
						currentUV -= deltaUV;
						depth = texture2D(uSampler2,currentUV).r;
						if (currentLayerDepth >= depth){
							break;
						}
					}

					// Parallax occlusion mapping

					vec2 previousUV = currentUV + deltaUV;
					float next = depth - currentLayerDepth;
					float previous = texture2D(uSampler2,previousUV).r - currentLayerDepth + layerDepth;
					float weight = next / (next - previous);

					return mix(currentUV,previousUV,weight);
				}
			}

			return uv;
    }

    void main(void){

      // light direction
      vec3 lightDirection = vec3(0.0,0.0,0.0);
      // eye direction
      vec3 eyeDirection = normalize(-vPosition.xyz);



      vec2 uv = computeUV(vTextureCoord,eyeDirection);
			//vec2 uv = vTextureCoord;

			// Calcul des tangent et biTangent
      // normalize normal
      vec3 oldNormal = normalize(vNormal);
      // new normal in tangent space
      vec3 newNormalTS = normalize(2.0*texture2D(uSampler1, uv).xyz -1.0) ;

      // newNormalTS = normalize(newNormalTS);
      // TS to View
      vec3 biTangent = cross(oldNormal,vec3(0.0,0.0,1.0));
      // test tangent
      if (dot(biTangent,biTangent) == 0.0){biTangent = cross(oldNormal,vec3(0.0,1.0,0.0));}
      vec3 tangent =  cross(biTangent,oldNormal);
      // no transpose
      vec3 u1 = tangent ;
      vec3 u2 = biTangent;
      vec3 u3 = oldNormal;
      // TS to view matrix
      mat3 TBN = mat3(u1,u2,u3);
      // transform normal
      vec3 normal = TBN*newNormalTS ;
      //  diffuse term

			// texture color
      vec4 texColor  = texture2D(uSampler0, uv);

      float diffuseLightWeight = 0.0;
			vec3 lightColor = texColor.xyz;

			if(uPointLightNumber >0){
				lightColor = vec3(0.0,0.0,0.0);
				for(int i = 0; i != 100 ; i++){
					if(i == uPointLightNumber){
						break;
					}
					vec3 c = vec3(uPointLightColors[i * 3 + 0],uPointLightColors[i * 3 + 1],uPointLightColors[i * 3 + 2]);
					vec3 p = vec3(uPointLightPositions[i * 3 + 0],uPointLightPositions[i * 3 + 1],uPointLightPositions[i * 3 + 2]);

					lightDirection = p - vPosition.xyz;
					diffuseLightWeight = max(dot(normalize(lightDirection),normal), 0.0);
					lightColor = lightColor + (diffuseLightWeight*c/pow2(norm(lightDirection)))*texColor.rgb*Kd;

				}

			}



      // light color
      //vec3 lightColor = Kd*uAmbientColor*texColor.rgb + Kd*diffuseLightWeight*uPointLightColor0 *texColor.rgb ; // Kd*uAmbientColor*texColor.rgb +
			lightColor = lightColor + Kd*uAmbientColor*texColor.rgb;
			gl_FragColor = vec4(lightColor,1.0);

    }


	</FRAGMENT>
</SHADER>
