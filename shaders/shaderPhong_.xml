<?xml version="1.0" encoding="UTF-8"?>

<SHADER name="texDiffProg">
	<VERTEX>
	// vertex shader
	// ------------------------------------------------------
	// texture diffuse shader per fragment
	// ------------------------------------------------------
	// lights nb: 1
	// textures nb: 1
	// ------------------------------------------------------

	// attributes inputs  (vertex arrays)
		attribute vec3 aVertexPosition;
		attribute vec2 aVertexTexCoord;
		attribute vec3 aVertexNormal;

	// uniform matrices
		uniform mat4 uMVMatrix;
		uniform mat4 uPMatrix;
		uniform mat3 uNMatrix;

	// output
    	varying vec2 vTextureCoord;
		varying vec4 vPosition;
		varying vec4 vPositionBrut;
		varying vec3 vNormal;

    void main(void) {
		// vPosition
		vPosition =  uMVMatrix * vec4(aVertexPosition, 1.0);
		vPositionBrut = vec4(aVertexPosition, 1.0);

    	// vNormal
		vNormal = uNMatrix * aVertexNormal;

        gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);

		// vTextureCoord
        vTextureCoord = aVertexTexCoord;
    }
	</VERTEX>
	<FRAGMENT>
	#ifdef GL_ES
	precision highp float;
	#endif
	// fragment shader
	// ------------------------------------------------------
	// texture diffuse shader per fragment
	// ------------------------------------------------------
	// lights nb: 1
	// textures nb: 1
	// ------------------------------------------------------

	// local constant
	// Kd: diffuse coeff
	float Kd = 1.0 ;
	float Ks = 0.01 ;
	float sh = 8.0 ;
	vec3 specColor = vec3(1.0,1.0,1.0);
		vec3 rimColor = vec3(0.15, 0.15, 0.15);

	// inputs
    	varying vec2 vTextureCoord;
		varying vec4 vPosition;
		varying vec3 vNormal;
		varying vec4 vPositionBrut;


   // Uniform
    	uniform sampler2D uSampler0;

		// lights
		// ambient
		uniform vec3 uAmbientColor;

		//point light ie omni dir:  location, color
		uniform vec3 uPointLightPosition0;
		uniform vec3 uPointLightColor0;

		uniform int uPointLightNumber;
		uniform vec3 uPointLightPositions[100];
		uniform vec3 uPointLightColors[100];
		uniform float uPointLightScope[100]; //100
		uniform float uPointLightAbsolutePosition[100];
		uniform int uPointLightType[100];

		uniform mat4 uVMatrix;

		mat3 transpose(mat3 inMatrix)
		{
				vec3 i0 = inMatrix[0];
				vec3 i1 = inMatrix[1];
				vec3 i2 = inMatrix[2];

				mat3 outMatrix = mat3(
						vec3(i0.x, i1.x, i2.x),
						vec3(i0.y, i1.y, i2.y),
						vec3(i0.z, i1.z, i2.z)
				);

				return outMatrix;
		}

    void main(void) {
		// light direction, eye direction
		vec3 lightDirection = normalize(uPointLightPosition0 - vPosition.xyz);
		vec3 eyeDirection = normalize(-vPosition.xyz);

		// normalize normal
		vec3 normal = normalize(vNormal);

		// texture color
		vec4 texColor  = texture2D(uSampler0, vTextureCoord);

		vec3 phongFinal = vec3(0.0,0.0,0.0);
		vec3 phongI = texColor.rgb ;

		// reflection direction
		vec3 reflectDirection = vec3(0.0,0.0,0.0);

		float diffuse = 0.0;
		float specular = 0.0;

		///////////////////////////////////////////////////////////////////////////
		// New pointlight system

		if(uPointLightNumber >0){
			for(int i = 0; i != 100 ; i++){
				if(i == uPointLightNumber){
					break;
				}
				vec3 lightColor = uPointLightColors[i]; //vec3(uPointLightColors[i * 3 + 0],uPointLightColors[i * 3 + 1],uPointLightColors[i * 3 + 2]);
				vec3 lightPosition = uPointLightPositions[i]; //vec3(uPointLightPositions[i * 3 + 0],uPointLightPositions[i * 3 + 1],uPointLightPositions[i * 3 + 2]);

				if(uPointLightType[i] == 1){
					if(uPointLightAbsolutePosition[i] != 0.0){

						lightPosition =  vec4(uVMatrix * vec4(lightPosition,1.0)).xyz;

					}
					lightDirection = lightPosition - vPosition.xyz;
				} else if (uPointLightType[i] == 2){
					lightDirection = lightPosition;
				}

				if(0.0 > dot(normalize(normal),normalize(eyeDirection))){
					normal = -normal;
				}

				reflectDirection = normalize(reflect(-lightDirection,normal));
				diffuse = max(dot(normal, lightDirection), 0.0);
				specular = pow(max(dot(reflectDirection,eyeDirection),0.0),sh);

				phongI =
				(Kd*diffuse* lightColor*texColor.rgb) +
				Ks*specular* lightColor *specColor;

				if(uPointLightScope[i] == -1.0){
					phongFinal = phongFinal + phongI/length(lightDirection);
				} else {
					if(uPointLightScope[i] > length(lightDirection)){
						phongFinal = phongFinal + phongI*(uPointLightScope[i]-length(lightDirection))/uPointLightScope[i];
					}
				}

			}

		}
		///////////////////////////////////////////////////////////////////////////
// light color
		phongFinal = phongFinal + uAmbientColor*Kd*texColor.rgb;
		gl_FragColor = vec4(phongFinal,1.0);

    }
	</FRAGMENT>
</SHADER>
